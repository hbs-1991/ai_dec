"""
AI DECLARANT MVP - –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –¢–ù –í–≠–î –¥–ª—è —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –±—Ä–æ–∫–µ—Ä–æ–≤ –¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω–∞
"""

import streamlit as st
import pandas as pd
import io
import asyncio
from typing import Optional, Dict, Any
import config
from datetime import datetime
import os
import time

from data_processor import DataProcessor, ProgressTracker
from results_display import ResultsDisplayManager
from database_manager import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="AI DECLARANT - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –¢–ù –í–≠–î",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞
st.markdown("""
<style>
    /* –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ */
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
        max-width: 1200px;
    }
    
    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1 {
        font-size: 2.5rem !important;
        font-weight: 700 !important;
        color: #1f2937 !important;
        margin-bottom: 1rem !important;
    }
    
    h2 {
        font-size: 1.8rem !important;
        font-weight: 600 !important;
        color: #374151 !important;
        margin-top: 2rem !important;
        margin-bottom: 1rem !important;
    }
    
    h3 {
        font-size: 1.4rem !important;
        font-weight: 600 !important;
        color: #4b5563 !important;
        margin-top: 1.5rem !important;
        margin-bottom: 0.8rem !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */
    .stButton > button {
        font-size: 1rem !important;
        font-weight: 500 !important;
        padding: 0.5rem 1.5rem !important;
        border-radius: 8px !important;
        border: none !important;
        transition: all 0.2s ease !important;
    }
    
    .stButton > button:hover {
        transform: translateY(-1px) !important;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15) !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Ç—Ä–∏–∫ */
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 12px;
        color: white;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin: 0.5rem 0;
    }
    
    .metric-title {
        font-size: 0.9rem;
        font-weight: 500;
        opacity: 0.9;
        margin-bottom: 0.5rem;
    }
    
    .metric-value {
        font-size: 2rem;
        font-weight: 700;
        margin: 0;
    }
    
    /* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */
    .stProgress > div > div > div > div {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    }
    
    /* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */
    .css-1d391kg {
        background: #f8fafc;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã */
    .stAlert {
        border-radius: 8px !important;
        border: none !important;
        font-size: 1rem !important;
    }
    
    /* –§–∞–π–ª –∞–ø–ª–æ–∞–¥–µ—Ä */
    .stFileUploader > div {
        border-radius: 12px !important;
        border: 2px dashed #d1d5db !important;
        padding: 2rem !important;
    }
    
    /* –¢–∞–±–ª–∏—Ü—ã */
    .stDataFrame {
        border-radius: 8px !important;
        overflow: hidden !important;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1) !important;
    }
    
    /* –°–µ–ª–µ–∫—Ç–±–æ–∫—Å—ã */
    .stSelectbox > div > div {
        border-radius: 8px !important;
        border: 1px solid #d1d5db !important;
    }
    
    /* –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è */
    .stTextInput > div > div {
        border-radius: 8px !important;
        border: 1px solid #d1d5db !important;
    }
    
    /* Expander */
    .streamlit-expanderHeader {
        font-size: 1.1rem !important;
        font-weight: 600 !important;
    }
    
    /* –ö–æ–¥ –±–ª–æ–∫–∏ */
    code {
        background: #f3f4f6 !important;
        padding: 0.2rem 0.4rem !important;
        border-radius: 4px !important;
        font-size: 0.9rem !important;
        color: #374151 !important;
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if "uploaded_file" not in st.session_state:
        st.session_state.uploaded_file = None
    if "uploaded_data" not in st.session_state:
        st.session_state.uploaded_data = None
    if "column_mapping" not in st.session_state:
        st.session_state.column_mapping = {}
    if "processing_results" not in st.session_state:
        st.session_state.processing_results = None
    if "data_processor" not in st.session_state:
        st.session_state.data_processor = DataProcessor()
    if "current_step" not in st.session_state:
        st.session_state.current_step = "upload"

def validate_file(uploaded_file) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if uploaded_file is None:
        return False, "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    file_extension = uploaded_file.name.split('.')[-1].lower()
    if file_extension not in config.SUPPORTED_FILE_TYPES:
        return False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {', '.join(config.SUPPORTED_FILE_TYPES)}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if uploaded_file.size > config.MAX_FILE_SIZE_MB * 1024 * 1024:
        return False, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {config.MAX_FILE_SIZE_MB}MB"
    
    return True, "OK"

def load_file_data(uploaded_file) -> Optional[pd.DataFrame]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        file_extension = uploaded_file.name.split('.')[-1].lower()
        
        if file_extension == 'csv':
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è CSV
            for encoding in ['utf-8', 'windows-1251', 'cp1251']:
                try:
                    uploaded_file.seek(0)
                    df = pd.read_csv(uploaded_file, encoding=encoding)
                    break
                except UnicodeDecodeError:
                    continue
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É CSV —Ñ–∞–π–ª–∞")
                return None
        
        elif file_extension in ['xlsx', 'xls']:
            df = pd.read_excel(uploaded_file)
        
        else:
            st.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
        if len(df) > config.MAX_ROWS_PER_FILE:
            st.warning(f"–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {len(df)} —Å—Ç—Ä–æ–∫. –ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ {config.MAX_ROWS_PER_FILE} —Å—Ç—Ä–æ–∫.")
            df = df.head(config.MAX_ROWS_PER_FILE)
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        df = df.dropna(how='all')
        
        return df
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def render_file_upload():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
    st.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ —Ñ–∞–π–ª—É
    with st.expander("‚ÑπÔ∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É", expanded=False):
        st.markdown(f"""
        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:** {', '.join(config.SUPPORTED_FILE_TYPES).upper()}  
        **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:** {config.MAX_FILE_SIZE_MB}MB  
        **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:** {config.MAX_ROWS_PER_FILE:,}  
        
        **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:**
        - –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        - –û–¥–Ω–∞ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ/–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π, –±—Ä–µ–Ω–¥–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏",
        type=config.SUPPORTED_FILE_TYPES,
        help="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞"
    )
    
    if uploaded_file is not None:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        is_valid, error_message = validate_file(uploaded_file)
        
        if is_valid:
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
                df = load_file_data(uploaded_file)
            
            if df is not None:
                st.session_state.uploaded_file = uploaded_file
                st.session_state.uploaded_data = df
                st.session_state.current_step = "preview"
                st.rerun()
        else:
            st.error(f"‚ùå {error_message}")

def render_data_preview():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if st.session_state.uploaded_data is None:
        st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return
    
    df = st.session_state.uploaded_data
    
    st.header("üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–°—Ç—Ä–æ–∫", len(df))
    with col2:
        st.metric("–ö–æ–ª–æ–Ω–æ–∫", len(df.columns))
    with col3:
        st.metric("–†–∞–∑–º–µ—Ä", f"{st.session_state.uploaded_file.size / 1024:.1f} KB")
    with col4:
        st.metric("–§–æ—Ä–º–∞—Ç", st.session_state.uploaded_file.name.split('.')[-1].upper())
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫
    st.subheader("üìã –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫")
    st.dataframe(df.head(10), use_container_width=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
    st.subheader("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–æ–Ω–∫–∞—Ö")
    column_info = pd.DataFrame({
        '–ö–æ–ª–æ–Ω–∫–∞': df.columns,
        '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö': [str(dtype) for dtype in df.dtypes],  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏
        '–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å': [f"{(~df[col].isna()).sum()}/{len(df)} ({(~df[col].isna()).sum()/len(df)*100:.1f}%)" for col in df.columns],
        '–ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π': [str(df[col].dropna().iloc[0] if len(df[col].dropna()) > 0 else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')[:50] + '...' if len(str(df[col].dropna().iloc[0] if len(df[col].dropna()) > 0 else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')) > 50 else str(df[col].dropna().iloc[0] if len(df[col].dropna()) > 0 else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö') for col in df.columns]
    })
    st.dataframe(column_info, use_container_width=True, hide_index=True)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    col1, col2 = st.columns([1, 1])
    with col1:
        if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ", use_container_width=True):
            st.session_state.current_step = "upload"
            st.rerun()
    
    with col2:
        if st.button("‚û°Ô∏è –°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏", use_container_width=True, type="primary"):
            st.session_state.current_step = "mapping"
            st.rerun()

def render_column_mapping():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫"""
    if st.session_state.uploaded_data is None:
        st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return
    
    df = st.session_state.uploaded_data
    
    st.header("üîó –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫")
    st.markdown("–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö:")
    
    # –§–æ—Ä–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    with st.form("column_mapping_form"):
        mapping = {}
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        st.subheader("üìù –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
        mapping['product_name'] = st.selectbox(
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *",
            options=[None] + list(df.columns),
            help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤"
        )
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        st.subheader("üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        col1, col2 = st.columns(2)
        
        with col1:
            mapping['description'] = st.selectbox(
                "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                options=[None] + list(df.columns),
                help="–ö–æ–ª–æ–Ω–∫–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞"
            )
            
            mapping['category'] = st.selectbox(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                options=[None] + list(df.columns),
                help="–ö–æ–ª–æ–Ω–∫–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π —Ç–æ–≤–∞—Ä–∞"
            )
        
        with col2:
            mapping['brand'] = st.selectbox(
                "–ë—Ä–µ–Ω–¥/–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å",
                options=[None] + list(df.columns),
                help="–ö–æ–ª–æ–Ω–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—Ä–µ–Ω–¥–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ"
            )
            
            mapping['additional_info'] = st.selectbox(
                "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                options=[None] + list(df.columns),
                help="–õ—é–±–∞—è –¥—Ä—É–≥–∞—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        if mapping['product_name'] is None:
            st.error("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞!")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            st.subheader("üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
            
            preview_data = []
            for i in range(min(3, len(df))):
                row_data = {}
                for field, column in mapping.items():
                    if column is not None:
                        value = str(df.iloc[i][column])[:100]
                        if len(str(df.iloc[i][column])) > 100:
                            value += "..."
                        row_data[config.REQUIRED_COLUMNS.get(field, field)] = value
                    else:
                        row_data[config.REQUIRED_COLUMNS.get(field, field)] = "‚Äî"
                preview_data.append(row_data)
            
            preview_df = pd.DataFrame(preview_data)
            st.dataframe(preview_df, use_container_width=True)
        
        # –ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            if st.form_submit_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", use_container_width=True):
                st.session_state.current_step = "preview"
                st.rerun()
        
        with col3:
            if st.form_submit_button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", use_container_width=True, type="primary"):
                if mapping['product_name'] is not None:
                    st.session_state.column_mapping = mapping
                    st.session_state.current_step = "processing"
                    st.rerun()
                else:
                    st.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞!")

def render_processing():
    """–≠—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é AI –∞–≥–µ–Ω—Ç–∞"""
    if st.session_state.uploaded_data is None or not st.session_state.column_mapping:
        st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    st.header("ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é AI")
    
    df = st.session_state.uploaded_data
    mapping = st.session_state.column_mapping
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    items = st.session_state.data_processor.prepare_items_for_processing(df, mapping)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
    st.subheader("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–ü–æ–∑–∏—Ü–∏–π –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ", len(items))
    with col2:
        estimated_time = len(items) * 2  # –ü—Ä–∏–º–µ—Ä–Ω–æ 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
        st.metric("–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è", f"{estimated_time//60}:{estimated_time%60:02d}")
    with col3:
        st.metric("–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞", config.BATCH_SIZE)
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    with st.expander("üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI", expanded=False):
        for i, item in enumerate(items[:3]):
            st.markdown(f"**–ü–æ–∑–∏—Ü–∏—è {i+1}:**")
            st.json(item)
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if st.button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –ø–æ–º–æ—â—å—é AI", type="primary", use_container_width=True):
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if not config.OPENAI_API_KEY:
            st.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω OPENAI_API_KEY. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        process_with_ai(items)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    col1, col2 = st.columns([1, 1])
    with col1:
        if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é", use_container_width=True):
            st.session_state.current_step = "mapping"
            st.rerun()
    
    with col2:
        if st.session_state.processing_results is not None:
            if st.button("‚û°Ô∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", use_container_width=True):
                st.session_state.current_step = "results"
                st.rerun()

def process_with_ai(items: list):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é AI –∞–≥–µ–Ω—Ç–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_tracker = ProgressTracker()
    progress_tracker.initialize(len(items))
    
    # –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    def update_progress(processed: int, total: int):
        progress_tracker.update(processed, total)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        with st.spinner("–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é AI..."):
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è Streamlit
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                filename = st.session_state.uploaded_file.name if st.session_state.uploaded_file else "unknown_file"
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –Ω–æ–≤–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π
                result = loop.run_until_complete(
                    st.session_state.data_processor.process_data_with_ai(
                        data=st.session_state.uploaded_data,
                        column_mapping=st.session_state.column_mapping,
                        filename=filename,
                        progress_callback=update_progress
                    )
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if not result["success"]:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session state
                st.session_state.processing_results = result
                st.session_state.results_dataframe = result["dataframe"]
                st.session_state.current_session_id = result["session_id"]
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                progress_tracker.complete()
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                st.success("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
                
                stats = result["statistics"]
                processing_time = result["processing_time"]
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", len(result["results"]))
                with col2:
                    st.metric("–í—ã—Å–æ–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ", f"{stats['high']} (‚â•80%)")
                with col3:
                    st.metric("–°—Ä–µ–¥–Ω–µ–µ –¥–æ–≤–µ—Ä–∏–µ", f"{stats['medium']} (40-79%)")
                with col4:
                    st.metric("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{processing_time:.1f}—Å")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
                st.session_state.current_step = "results"
                st.rerun()
                
            finally:
                loop.close()
                
    except Exception as e:
        progress_tracker.error(str(e))
        st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        st.session_state.processing_error = str(e)


def render_sidebar():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    with st.sidebar:
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        st.markdown("""
        <div style="text-align: center; padding: 1rem 0; border-bottom: 1px solid #e5e7eb; margin-bottom: 1.5rem;">
            <h2 style="margin: 0; color: #1f2937; font-size: 1.5rem;">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
        </div>
        """, unsafe_allow_html=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–∞
        if hasattr(st.session_state, 'uploaded_data') and st.session_state.uploaded_data is not None:
            df = st.session_state.uploaded_data
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            metrics = [
                {"title": "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫", "value": str(len(df)), "icon": "üì¶"},
                {"title": "–ö–æ–ª–æ–Ω–æ–∫", "value": str(len(df.columns)), "icon": "üìã"},
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
            if hasattr(st.session_state, 'column_mapping') and st.session_state.column_mapping:
                mapped_count = sum(1 for v in st.session_state.column_mapping.values() if v is not None)
                metrics.append({"title": "–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π", "value": str(mapped_count), "icon": "üîó"})
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            for metric in metrics:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-title">{metric['icon']} {metric['title']}</div>
                    <div class="metric-value">{metric['value']}</div>
                </div>
                """, unsafe_allow_html=True)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        st.markdown("<div style='margin: 2rem 0;'></div>", unsafe_allow_html=True)
        
        # –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.markdown("""
        <div style="text-align: center; padding: 1rem 0; border-bottom: 1px solid #e5e7eb; margin-bottom: 1.5rem;">
            <h2 style="margin: 0; color: #1f2937; font-size: 1.5rem;">‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞</h2>
        </div>
        """, unsafe_allow_html=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
        info_sections = [
            {
                "title": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:",
                "items": ["üìÑ Excel (.xlsx, .xls)", "üìÑ CSV (.csv)"],
                "color": "#3b82f6"
            },
            {
                "title": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:",
                "items": ["üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –¥–æ 50MB", "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: –¥–æ 1,000"],
                "color": "#f59e0b"
            },
            {
                "title": "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:",
                "items": ["üè∑Ô∏è –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏", "üìù –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞"],
                "color": "#10b981"
            }
        ]
        
        for section in info_sections:
            st.markdown(f"""
            <div style="
                background: {section['color']}15;
                border-left: 4px solid {section['color']};
                padding: 1rem;
                margin: 1rem 0;
                border-radius: 0 8px 8px 0;
            ">
                <div style="font-weight: 600; color: {section['color']}; margin-bottom: 0.5rem;">
                    {section['title']}
                </div>
                <div style="font-size: 0.9rem; color: #4b5563;">
                    {"<br>".join(section['items'])}
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.markdown("<div style='margin: 2rem 0;'></div>", unsafe_allow_html=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        st.markdown("""
        <div style="
            background: #f3f4f6;
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
            font-size: 0.8rem;
            color: #6b7280;
            margin-top: 2rem;
        ">
            <div style="font-weight: 600; margin-bottom: 0.5rem;">AI DECLARANT v1.0</div>
            <div>Powered by OpenAI & Streamlit</div>
        </div>
        """, unsafe_allow_html=True)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init_session_state()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title(f"{config.APP_ICON} {config.APP_TITLE}")
    st.markdown(config.APP_DESCRIPTION)
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —à–∞–≥–∞–º
    steps = ["–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞", "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", "–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ", "–û–±—Ä–∞–±–æ—Ç–∫–∞", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"]
    current_step_index = {
        "upload": 0,
        "preview": 1, 
        "mapping": 2,
        "processing": 3,
        "results": 4
    }.get(st.session_state.current_step, 0)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    st.progress((current_step_index + 1) / len(steps))
    st.markdown(f"**–®–∞–≥ {current_step_index + 1} –∏–∑ {len(steps)}: {steps[current_step_index]}**")
    
    st.divider()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    render_sidebar()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    if st.session_state.current_step == "upload":
        render_file_upload()
    elif st.session_state.current_step == "preview":
        render_data_preview()
    elif st.session_state.current_step == "mapping":
        render_column_mapping()
    elif st.session_state.current_step == "processing":
        render_processing()
    elif st.session_state.current_step == "results":
        # –®–∞–≥ 5: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if st.session_state.processing_results is not None:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            results_display = ResultsDisplayManager(
                data_processor=st.session_state.data_processor,
                db_manager=DatabaseManager() if 'current_session_id' in st.session_state else None
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            tab1, tab2, tab3 = st.tabs(["üìä –û–±–∑–æ—Ä", "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üíæ –≠–∫—Å–ø–æ—Ä—Ç"])
            
            # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            data_processor = st.session_state.data_processor
            if hasattr(st.session_state, 'current_session_id') and st.session_state.current_session_id:
                results_df = data_processor.create_dataframe_with_db_results(st.session_state.current_session_id)
            else:
                # Fallback –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏–∑ processing_results
                results_df = data_processor.create_results_dataframe(st.session_state.processing_results)
                
            with tab1:
                results_display.render_results_overview(st.session_state.processing_results, results_df)
            
            with tab2:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                results_display.render_results_table(results_df)
            
            with tab3:
                results_display.render_export_section(results_df)
        else:
            st.error("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.")
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        st.markdown("---")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é", type="secondary"):
                st.session_state.current_step = "mapping"
                st.rerun()
        
        with col2:
            if st.button("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", type="secondary"):
                st.session_state.current_step = "processing"
                st.rerun()
        
        with col3:
            if st.button("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª", type="primary"):
                # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                for key in ['uploaded_file', 'uploaded_data', 'column_mapping', 'processing_results']:
                    if key in st.session_state:
                        del st.session_state[key]
                st.session_state.current_step = "upload"
                st.rerun()
    else:
        st.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥")

if __name__ == "__main__":
    main() 