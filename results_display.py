"""
AI DECLARANT - Results Display
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¢–ù –í–≠–î
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import io
from typing import Dict, List, Optional, Any
from datetime import datetime
import config

from ai_agents.hs_agent import BatchProcessingResult, HSCodeSearchResult
from data_processor import DataProcessor
from database_manager import DatabaseManager


def clean_dataframe_for_display(df: pd.DataFrame) -> pd.DataFrame:
    """
    –û—á–∏—â–∞–µ—Ç DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    
    Args:
        df: –ò—Å—Ö–æ–¥–Ω—ã–π DataFrame
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–π DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if df.empty:
        return df
    
    display_df = df.copy()
    
    # –°–∫—Ä—ã–≤–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    columns_to_hide = ['_result_id']
    for col in columns_to_hide:
        if col in display_df.columns:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ DataFrame, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            pass  # –ö–æ–ª–æ–Ω–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ DataFrame –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    
    # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_df = display_df.fillna('')
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ deprecated errors='ignore')
    for col in display_df.columns:
        if '–¥–æ–≤–µ—Ä–∏—è' in col.lower() or 'confidence' in col.lower():
            try:
                # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –±–µ–∑ deprecated errors='ignore'
                display_df[col] = pd.to_numeric(display_df[col])
            except (ValueError, TypeError):
                # –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                pass
    
    return display_df


class ResultsDisplayManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¢–ù –í–≠–î –∫–æ–¥–æ–≤
    —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    """
    
    def __init__(self, data_processor, db_manager: DatabaseManager = None):
        self.data_processor = data_processor
        self.db_manager = db_manager or DatabaseManager()
        
        # –†—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç–∞—Ç—É—Å–æ–≤
        self.status_translations = {
            'pending': '–æ–∂–∏–¥–∞–µ—Ç',
            'confirmed': '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', 
            'needs_review': '—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏',
            'rejected': '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'
        }
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
        self.status_colors = {
            'pending': '#6c757d',      # —Å–µ—Ä—ã–π
            'confirmed': '#28a745',    # –∑–µ–ª–µ–Ω—ã–π
            'needs_review': '#ffc107', # –∂–µ–ª—Ç—ã–π
            'rejected': '#dc3545'      # –∫—Ä–∞—Å–Ω—ã–π
        }
    
    def get_status_badge(self, status: str) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-–±–µ–π–¥–∂ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        
        Args:
            status: –°—Ç–∞—Ç—É—Å ('pending', 'confirmed', 'needs_review', 'rejected')
            
        Returns:
            HTML —Å—Ç—Ä–æ–∫–∞ —Å —Ü–≤–µ—Ç–Ω—ã–º –±–µ–π–¥–∂–µ–º
        """
        status_map = {
            'pending': ('–æ–∂–∏–¥–∞–µ—Ç', '#ffc107', '#000'),      # –ñ–µ–ª—Ç—ã–π
            'confirmed': ('–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', '#28a745', '#fff'), # –ó–µ–ª–µ–Ω—ã–π  
            'needs_review': ('—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏', '#fd7e14', '#fff'), # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            'rejected': ('–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', '#dc3545', '#fff')     # –ö—Ä–∞—Å–Ω—ã–π
        }
        
        if status in status_map:
            text, bg_color, text_color = status_map[status]
            return f'''
                <span style="
                    background-color: {bg_color}; 
                    color: {text_color}; 
                    padding: 0.25rem 0.5rem; 
                    border-radius: 0.375rem; 
                    font-size: 0.75rem; 
                    font-weight: 600;
                    text-transform: uppercase;
                    letter-spacing: 0.05em;
                    display: inline-block;
                ">
                    {text}
                </span>
            '''
        return f'<span style="color: #6c757d;">{status}</span>'
    
    def get_confidence_badge(self, confidence: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π badge –¥–ª—è —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        if confidence >= 80:
            color = '#28a745'  # –∑–µ–ª–µ–Ω—ã–π
            level = '–≤—ã—Å–æ–∫–∞—è'
        elif confidence >= 40:
            color = '#ffc107'  # –∂–µ–ª—Ç—ã–π  
            level = '—Å—Ä–µ–¥–Ω—è—è'
        else:
            color = '#dc3545'  # –∫—Ä–∞—Å–Ω—ã–π
            level = '–Ω–∏–∑–∫–∞—è'
        
        return f"""
        <span style="
            background-color: {color}; 
            color: white; 
            padding: 2px 6px; 
            border-radius: 8px; 
            font-size: 11px;
            font-weight: bold;
        ">
            {confidence}% ({level})
        </span>
        """
    
    def render_results_overview(
        self, 
        processing_results: Dict[str, Any],
        results_df: pd.DataFrame
    ):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±–∑–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å —Ä—É—Å—Å–∫–∏–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏
        
        Args:
            processing_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ data_processor
            results_df: DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        st.header("üìä –û–±–∑–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        stats = processing_results.get("statistics", {})
        processing_time = processing_results.get("processing_time", 0)
        total_items = len(processing_results.get("results", []))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤",
                value=total_items
            )
        
        with col2:
            st.metric(
                label="‚úÖ –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
                value=f"{stats.get('high', 0)} ({stats.get('high', 0)/total_items*100:.1f}%)" if total_items > 0 else "0 (0%)"
            )
            
        with col3:
            st.metric(
                label="‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", 
                value=f"{stats.get('medium', 0)} ({stats.get('medium', 0)/total_items*100:.1f}%)" if total_items > 0 else "0 (0%)"
            )
            
        with col4:
            st.metric(
                label="‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                value=f"{processing_time:.1f} —Å–µ–∫"
            )
        
        st.divider()
        
        # –î–∏–∞–≥—Ä–∞–º–º—ã
        col1, col2 = st.columns(2)
        
        with col1:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–ø–∏—Ä–æ–≥)
            if total_items > 0:
                confidence_data = {
                    '–í—ã—Å–æ–∫–∞—è (‚â•80%)': stats.get('high', 0),
                    '–°—Ä–µ–¥–Ω—è—è (40-79%)': stats.get('medium', 0), 
                    '–ù–∏–∑–∫–∞—è (<40%)': stats.get('low', 0)
                }
                
                colors = ['#28a745', '#ffc107', '#dc3545']
                
                fig_pie = px.pie(
                    values=list(confidence_data.values()),
                    names=list(confidence_data.keys()),
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
                    color_discrete_sequence=colors
                )
                fig_pie.update_traces(textposition='inside', textinfo='percent+label')
                fig_pie.update_layout(height=400)
                st.plotly_chart(fig_pie, use_container_width=True)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã")
        
        with col2:
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if not results_df.empty and 'confidence_percentage' in results_df.columns:
                fig_hist = px.histogram(
                    results_df,
                    x='confidence_percentage',
                    nbins=20,
                    title="–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
                    labels={
                        'confidence_percentage': '–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (%)',
                        'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤'
                    }
                )
                fig_hist.update_traces(marker_color='lightblue', marker_line_color='black', marker_line_width=1)
                fig_hist.update_layout(height=400)
                st.plotly_chart(fig_hist, use_container_width=True)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã")
        
        # –¢–æ–ø HS –∫–æ–¥–æ–≤
        st.subheader("üîù –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –∫–æ–¥—ã –¢–ù –í–≠–î")
        
        if not results_df.empty and 'hs_code' in results_df.columns:
            top_codes = results_df['hs_code'].value_counts().head(10)
            
            if not top_codes.empty:
                fig_bar = px.bar(
                    x=top_codes.values,
                    y=top_codes.index,
                    orientation='h',
                    title="–¢–æ–ø-10 –∫–æ–¥–æ–≤ –¢–ù –í–≠–î",
                    labels={
                        'x': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤',
                        'y': '–ö–æ–¥ –¢–ù –í–≠–î'
                    }
                )
                fig_bar.update_layout(height=400)
                st.plotly_chart(fig_bar, use_container_width=True)
            else:
                st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø –∫–æ–¥–æ–≤")
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–¥–∞—Ö –¢–ù –í–≠–î")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–±—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏
        if not results_df.empty and 'confidence_percentage' in results_df.columns:
            needs_review = results_df[results_df['confidence_percentage'] < 80]
            
            if not needs_review.empty:
                st.warning(f"‚ö†Ô∏è **{len(needs_review)} —Ç–æ–≤–∞—Ä–æ–≤ —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏** (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å < 80%)")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
                with st.expander("üîç –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏", expanded=False):
                    for idx, row in needs_review.head(5).iterrows():
                        product_name = row.get('product_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                        hs_code = row.get('hs_code', '–ù–µ –Ω–∞–π–¥–µ–Ω')
                        confidence = row.get('confidence_percentage', 0)
                        
                        st.markdown(f"""
                        **{product_name}**
                        - –ö–æ–¥ –¢–ù –í–≠–î: `{hs_code}`
                        - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%
                        """)
            else:
                st.success("‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç –≤—ã—Å–æ–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
        

    @st.dialog("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞")
    def render_item_details_modal(self, result_id: int, session_id: int):
        """
        –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        
        Args:
            result_id: ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            session_id: ID —Å–µ—Å—Å–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        if not self.db_manager:
            st.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        result_details = self.db_manager.get_result_details(result_id)
        
        if not result_details:
            st.error("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        st.markdown(f"### üì¶ {result_details['product_name']}")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown(f"**–§–∞–π–ª:** {result_details['filename']}")
            st.markdown(f"**–ü–æ–∑–∏—Ü–∏—è –≤ —Ñ–∞–π–ª–µ:** {result_details['row_index'] + 1}")
        
        with col2:
            confidence = result_details['confidence_percentage']
            confidence_color = "üü¢" if confidence >= 80 else "üü°" if confidence >= 40 else "üî¥"
            st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{confidence}%", delta=f"{confidence_color} –£—Ä–æ–≤–µ–Ω—å")
        
        st.divider()
        
        # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        st.subheader("üìã –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if result_details['original_description']:
                st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {result_details['original_description']}")
            if result_details['category']:
                st.markdown(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {result_details['category']}")
            
        with col2:
            if result_details['brand']:
                st.markdown(f"**–ë—Ä–µ–Ω–¥:** {result_details['brand']}")
            if result_details['additional_info']:
                st.markdown(f"**–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** {result_details['additional_info']}")
        
        st.divider()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ AI")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"**–ö–æ–¥ –¢–ù –í–≠–î:** `{result_details['hs_code']}`")
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã
            alt_codes = result_details['alternative_codes']
            if alt_codes:
                alt_codes_str = ", ".join(alt_codes)
                st.markdown(f"**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã:** {alt_codes_str}")
        
        with col2:
            # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤ info –±–ª–æ–∫–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            if result_details['ai_reasoning']:
                st.markdown("**–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ AI:**")
                st.info(result_details['ai_reasoning'])
        
        st.divider()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        st.subheader("üë§ –î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        current_status = result_details['user_status']
        current_notes = result_details['user_notes'] or ""
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.markdown("**–°—Ç–∞—Ç—É—Å:**")
            status_options = {
                'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
                'needs_review': '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏', 
                'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è selectbox
            status_keys = list(status_options.keys())
            current_index = status_keys.index(current_status) if current_status in status_keys else 1
            
            new_status = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
                options=status_keys,
                format_func=lambda x: status_options[x],
                index=current_index,
                key=f"status_{result_id}"
            )
        
        with col2:
            st.markdown("**–ó–∞–º–µ—Ç–∫–∏:**")
            new_notes = st.text_area(
                "–í–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:",
                value=current_notes,
                height=100,
                placeholder="–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏...",
                key=f"notes_{result_id}"
            )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if result_details['updated_at'] != result_details['created_at']:
            st.caption(f"üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {result_details['updated_at']}")
        
        st.divider()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary", use_container_width=True):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
                success = self.db_manager.update_result_user_status(
                    result_id=result_id,
                    user_status=new_status,
                    user_notes=new_notes
                )
                
                if success:
                    st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                    st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
        with col2:
            if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", use_container_width=True):
                st.rerun()  # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        
        with col3:
            if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å", use_container_width=True):
                st.rerun()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ

    def render_results_table(self, df: pd.DataFrame, results_per_page: int = 10) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        
        Args:
            df: DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            results_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        """
        if df.empty:
            st.warning("üì≠ –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        filtered_df = self._apply_filters(df)
        
        if filtered_df.empty:
            st.warning("üîç –ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.markdown(f"**–ü–æ–∫–∞–∑–∞–Ω–æ:** {len(filtered_df)} –∏–∑ {len(df)} –ø–æ–∑–∏—Ü–∏–π")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            options = [5, 10, 25, 50, 100]
            try:
                default_index = options.index(results_per_page)
            except ValueError:
                default_index = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 (–∏–Ω–¥–µ–∫—Å 1)
            
            results_per_page = st.selectbox(
                "–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:",
                options=options,
                index=default_index,
                key="results_per_page"
            )
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total_pages = (len(filtered_df) - 1) // results_per_page + 1
        
        if total_pages > 1:
            page = st.selectbox(
                f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ (1-{total_pages}):",
                range(1, total_pages + 1),
                key="current_page"
            ) - 1
        else:
            page = 0
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = page * results_per_page
        end_idx = start_idx + results_per_page
        page_df = filtered_df.iloc[start_idx:end_idx].copy()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —ç–∫—Å–ø–æ—Ä—Ç–∞
        display_df = clean_dataframe_for_display(page_df)
        st.dataframe(
            display_df,
            use_container_width=True,
            height=400
        )
        
        # üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
        st.markdown("### üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
        st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        for idx, (_, row) in enumerate(page_df.iterrows()):
            self._render_product_card(row, idx)

    def render_export_section(self, results_df: pd.DataFrame):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–µ–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        Args:
            results_df: DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        """
        st.header("üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        if len(results_df) == 0:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –û—á–∏—â–∞–µ–º DataFrame –ø–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π
        clean_df = clean_dataframe_for_display(results_df)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
            st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞")
            
            export_format = st.selectbox(
                "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞",
                options=["Excel (.xlsx)", "CSV (.csv)"],
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            )
            
            # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_columns = st.multiselect(
                "–ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
                options=list(clean_df.columns),
                default=list(clean_df.columns),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤–∫–ª—é—á–∏—Ç—å –≤ —ç–∫—Å–ø–æ—Ä—Ç"
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            include_stats = st.checkbox(
                "–í–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                value=True,
                help="–î–æ–±–∞–≤–∏—Ç—å –ª–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è Excel)"
            )
        
        with col2:
            st.subheader("üìä –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —ç–∫—Å–ø–æ—Ä—Ç–µ
            st.metric("–ü–æ–∑–∏—Ü–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", len(clean_df))
            st.metric("–ö–æ–ª–æ–Ω–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", len(export_columns))
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä (–ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏)
            if export_columns:
                preview_df = clean_df[export_columns].head(3)
                st.dataframe(preview_df, use_container_width=True)
        
        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        st.subheader("üöÄ –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
        
        if not export_columns:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        col1, col2 = st.columns(2)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_df = clean_df[export_columns].copy()
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        with col1:
            if st.button("üì• –°–∫–∞—á–∞—Ç—å Excel", type="primary", use_container_width=True):
                try:
                    excel_data = self.data_processor.export_results(export_df, "xlsx")
                    filename = f"tnved_results_{timestamp}.xlsx"
                    
                    st.download_button(
                        label="üíæ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª",
                        data=excel_data,
                        file_name=filename,
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        use_container_width=True
                    )
                    st.success(f"‚úÖ Excel —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é: {filename}")
                    
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {str(e)}")
        
        with col2:
            if st.button("üìÑ –°–∫–∞—á–∞—Ç—å CSV", use_container_width=True):
                try:
                    csv_data = self.data_processor.export_results(export_df, "csv")
                    filename = f"tnved_results_{timestamp}.csv"
                    
                    st.download_button(
                        label="üíæ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª",
                        data=csv_data,
                        file_name=filename,
                        mime="text/csv",
                        use_container_width=True
                    )
                    st.success(f"‚úÖ CSV —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é: {filename}")
                    
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSV —Ñ–∞–π–ª–∞: {str(e)}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö —ç–∫—Å–ø–æ—Ä—Ç–∞", expanded=False):
            st.markdown("""
            **Excel (.xlsx):**
            - –ü–æ–ª–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            - –£—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ–≤–µ—Ä–∏—è
            - –ê–≤—Ç–æ–ø–æ–¥–≥–æ–Ω–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∏—è –ª–∏—Å—Ç–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            
            **CSV (.csv):**
            - –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ª—é–±—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏
            - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            - –ö–æ–¥–∏—Ä–æ–≤–∫–∞ UTF-8 —Å BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            """)

    def _apply_filters(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∫ DataFrame"""
        
        # –§–∏–ª—å—Ç—Ä—ã
        with st.expander("üîß –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫", expanded=True):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –¥–æ–≤–µ—Ä–∏—è
                if '–°—Ç–∞—Ç—É—Å –¥–æ–≤–µ—Ä–∏—è' in df.columns:
                    status_options = ["–í—Å–µ"] + list(df['–°—Ç–∞—Ç—É—Å –¥–æ–≤–µ—Ä–∏—è'].unique())
                    selected_status = st.selectbox(
                        "–°—Ç–∞—Ç—É—Å –¥–æ–≤–µ—Ä–∏—è",
                        options=status_options,
                        help="–§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ–≤–µ—Ä–∏—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É"
                    )
                else:
                    selected_status = "–í—Å–µ"
            
            with col2:
                # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                confidence_col = '–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è' if '–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è' in df.columns else None
                if confidence_col:
                    min_conf, max_conf = st.slider(
                        "–î–∏–∞–ø–∞–∑–æ–Ω —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (%)",
                        min_value=0,
                        max_value=100,
                        value=(0, 100),
                        help="–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
                    )
                else:
                    min_conf, max_conf = 0, 100
            
            with col3:
                # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
                search_text = st.text_input(
                    "–ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞...",
                    help="–ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏—è—Ö –¢–ù –í–≠–î"
                )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_df = df.copy()
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if selected_status != "–í—Å–µ" and '–°—Ç–∞—Ç—É—Å –¥–æ–≤–µ—Ä–∏—è' in filtered_df.columns:
            filtered_df = filtered_df[filtered_df['–°—Ç–∞—Ç—É—Å –¥–æ–≤–µ—Ä–∏—è'] == selected_status]
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if confidence_col and confidence_col in filtered_df.columns:
            filtered_df = filtered_df[
                (filtered_df[confidence_col] >= min_conf) & 
                (filtered_df[confidence_col] <= max_conf)
            ]
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        if search_text:
            search_columns = []
            for col in filtered_df.columns:
                if not col.startswith('_'):
                    search_columns.append(col)
            
            if search_columns:
                mask = filtered_df[search_columns].astype(str).apply(
                    lambda x: x.str.contains(search_text, case=False, na=False)
                ).any(axis=1)
                filtered_df = filtered_df[mask]
        
        return filtered_df

    def _render_product_card(self, row: pd.Series, idx: int) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ä–æ–±–Ω–µ–µ"""
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        product_name = self._get_product_name(row)
        hs_code = self._escape_html(str(row.get('–ö–æ–¥ –¢–ù –í–≠–î', '0000.00.000')))
        confidence = row.get('–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è', 0)
        status = self._get_confidence_status(confidence)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ Streamlit –∫–æ–ª–æ–Ω–∫–∏
        # –°–æ–∑–¥–∞–µ–º CSS –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        if not hasattr(st.session_state, 'cards_css_loaded'):
            st.markdown("""
            <style>
            .product-card {
                border: 1px solid #e2e8f0;
                border-radius: 8px;
                padding: 12px;
                margin: 4px 0;
                background: white;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            }
            </style>
            """, unsafe_allow_html=True)
            st.session_state.cards_css_loaded = True
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ —Å CSS –∫–ª–∞—Å—Å–æ–º
        card_container = st.container()
        with card_container:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
            st.markdown('<div class="product-card">', unsafe_allow_html=True)
            
            # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            col1, col2, col3, col4 = st.columns([4, 2, 3, 1], gap="small")
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            with col1:
                st.markdown(f"**üì¶ {product_name}**")
            
            # –ö–æ–¥ –¢–ù –í–≠–î
            with col2:
                st.markdown(f"**–ö–æ–¥:** {hs_code}")
            
            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
            with col3:
                # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π –±–µ–π–¥–∂ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
                badge_html = f"""
                <span style="
                    background: {status['color']};
                    color: white;
                    padding: 2px 8px;
                    border-radius: 12px;
                    font-size: 11px;
                    font-weight: 600;
                    margin-left: 4px;
                ">{status['label']}</span>
                """
                st.markdown(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {confidence}% {badge_html}", unsafe_allow_html=True)
            
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–µ–µ
            with col4:
                if st.button(
                    "üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", 
                    key=f"btn_details_{idx}",
                    use_container_width=True,
                    type="secondary",
                    help="–û—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"
                ):
                    self._show_details_modal(row)
            
            st.markdown('</div>', unsafe_allow_html=True)

    def _get_product_name(self, row: pd.Series) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
        possible_columns = ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', 'Product', 'Name', '–¢–æ–≤–∞—Ä']
        
        for col in possible_columns:
            if col in row.index and pd.notna(row[col]):
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                return self._escape_html(str(row[col])[:80])
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–µ —Å–ª—É–∂–µ–±–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
        for col in row.index:
            if not col.startswith(('_', '–ö–æ–¥ –¢–ù –í–≠–î', '–£—Ä–æ–≤–µ–Ω—å', '–û–ø–∏—Å–∞–Ω–∏–µ', '–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å')):
                if pd.notna(row[col]):
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    return self._escape_html(str(row[col])[:80])
        
        return "–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    
    def _escape_html(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ"""
        import html
        return html.escape(text)

    def _get_confidence_status(self, confidence: float) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ —Ü–≤–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        if confidence >= 80:
            return {"label": "–í—ã—Å–æ–∫–∏–π", "color": "#10b981"}
        elif confidence >= 40:
            return {"label": "–°—Ä–µ–¥–Ω–∏–π", "color": "#f59e0b"}
        else:
            return {"label": "–ù–∏–∑–∫–∏–π", "color": "#ef4444"}

    @st.dialog("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ", width="large")
    def _show_details_modal(self, row: pd.Series) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        product_name = self._get_product_name(row)
        hs_code = self._escape_html(str(row.get('–ö–æ–¥ –¢–ù –í–≠–î', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')))
        confidence = row.get('–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è', 0)
        description = self._escape_html(str(row.get('–û–ø–∏—Å–∞–Ω–∏–µ –¢–ù –í–≠–î', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')))
        reasoning = self._escape_html(str(row.get('–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ', '–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')))
        status = self._get_confidence_status(confidence)
        
        # –°—Ç–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        st.markdown(f"""
        <div style="
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 16px;
            border-radius: 8px;
            margin-bottom: 15px;
            text-align: center;
        ">
            <h2 style="margin: 0; font-size: 20px; font-weight: 700;">
                üì¶ {product_name}
            </h2>
        </div>
        """, unsafe_allow_html=True)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div style="
                background: #f8fafc;
                border: 1px solid #e2e8f0;
                border-radius: 8px;
                padding: 12px;
                margin-bottom: 10px;
            ">
                <h4 style="color: #1e293b; margin: 0; font-size: 16px;">üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</h4>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown(f"""
            <div style="padding: 0 12px; font-size: 14px;">
                <p style="margin: 8px 0;"><strong style="color: #475569;">–ö–æ–¥ –¢–ù –í–≠–î:</strong></p>
                <code style="
                    background: #f1f5f9; 
                    padding: 8px 12px; 
                    border-radius: 6px; 
                    color: #0f172a;
                    font-size: 16px;
                    font-weight: 700;
                    border: 2px solid #e2e8f0;
                    display: block;
                    text-align: center;
                    margin-bottom: 12px;
                ">{hs_code}</code>
                <p style="margin: 8px 0;"><strong style="color: #475569;">–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è:</strong> 
                   <span style="color: {status['color']}; font-weight: 700; font-size: 16px;">
                       {confidence}% ({status['label']})
                   </span>
                </p>
            </div>
            """, unsafe_allow_html=True)
            
        with col2:
            st.markdown("""
            <div style="
                background: #f8fafc;
                border: 1px solid #e2e8f0;
                border-radius: 8px;
                padding: 12px;
                margin-bottom: 10px;
            ">
                <h4 style="color: #1e293b; margin: 0; font-size: 16px;">üìä –°—Ç–∞—Ç—É—Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏</h4>
            </div>
            """, unsafe_allow_html=True)
            
            confidence_color = status['color']
            st.markdown(f"""
            <div style="padding: 0 12px;">
                <div style="
                    background: linear-gradient(135deg, {confidence_color}20 0%, {confidence_color}10 100%);
                    border: 2px solid {confidence_color};
                    border-radius: 8px;
                    padding: 12px;
                    text-align: center;
                    margin-bottom: 8px;
                ">
                    <div style="
                        color: {confidence_color}; 
                        font-weight: 700; 
                        font-size: 14px; 
                        margin-bottom: 6px;
                    ">
                        {status['label'].upper()} –£–†–û–í–ï–ù–¨
                    </div>
                    <div style="
                        color: {confidence_color}; 
                        font-size: 24px; 
                        font-weight: 800;
                    ">
                        {confidence}%
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        st.markdown("---")
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –¢–ù –í–≠–î –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        st.markdown("""
        <div style="
            background: #fef7ed;
            border: 1px solid #fed7aa;
            border-radius: 8px;
            padding: 12px;
            margin: 15px 0 10px 0;
        ">
            <h4 style="color: #9a3412; margin: 0; font-size: 16px;">üìã –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¢–ù –í–≠–î</h4>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown(f"""
        <div style="
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 6px;
            padding: 12px;
            font-size: 14px;
            line-height: 1.5;
            color: #374151;
            margin-bottom: 10px;
        ">
            {description}
        </div>
        """, unsafe_allow_html=True)
        
        # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        st.markdown("""
        <div style="
            background: #f0f9ff;
            border: 1px solid #bae6fd;
            border-radius: 8px;
            padding: 12px;
            margin: 15px 0 10px 0;
        ">
            <h4 style="color: #0c4a6e; margin: 0; font-size: 16px;">üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞</h4>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown(f"""
        <div style="
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 6px;
            padding: 12px;
            font-size: 14px;
            line-height: 1.5;
            color: #374151;
            margin-bottom: 10px;
        ">
            {reasoning}
        </div>
        """, unsafe_allow_html=True)
        
        # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        st.markdown("""
        <div style="
            background: #f0fdf4;
            border: 1px solid #bbf7d0;
            border-radius: 8px;
            padding: 12px;
            margin: 15px 0 10px 0;
        ">
            <h4 style="color: #14532d; margin: 0; font-size: 16px;">üìã –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞</h4>
        </div>
        """, unsafe_allow_html=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        original_data = []
        for col_name, value in row.items():
            if not col_name.startswith(('_', '–ö–æ–¥ –¢–ù –í–≠–î', '–£—Ä–æ–≤–µ–Ω—å', '–û–ø–∏—Å–∞–Ω–∏–µ –¢–ù –í–≠–î', '–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å')):
                if pd.notna(value) and str(value).strip():
                    original_data.append({'–ü–æ–ª–µ': col_name, '–ó–Ω–∞—á–µ–Ω–∏–µ': str(value)})
        
        if original_data:
            original_df = pd.DataFrame(original_data)
            st.dataframe(
                original_df, 
                use_container_width=True, 
                hide_index=True,
                height=min(len(original_data) * 35 + 50, 300)
            )
        else:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ")
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        st.markdown("<br>", unsafe_allow_html=True)
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button(
                "‚úÖ –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ", 
                type="primary", 
                use_container_width=True,
                key="close_modal_btn"
            ):
                st.rerun()


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
__all__ = [
    'ResultsDisplayManager'
] 