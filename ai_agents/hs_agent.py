"""
AI DECLARANT - HS Code Agent
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤ –¢–ù –í–≠–î –Ω–∞ –æ—Å–Ω–æ–≤–µ openai-agents
"""

import asyncio
from typing import List, Dict, Any, Optional
from pydantic import BaseModel, Field
from dataclasses import dataclass
import config

from agents import (
    Agent, 
    Runner, 
    FileSearchTool, 
    function_tool,
    RunContextWrapper,
    ModelSettings,
    WebSearchTool
)


@dataclass
class ProcessingContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
    batch_id: str
    total_items: int
    processed_items: int = 0
    failed_items: List[str] = None
    
    def __post_init__(self):
        if self.failed_items is None:
            self.failed_items = []


class HSCodeSearchResult(BaseModel):
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¢–ù –í–≠–î –∫–æ–¥–∞"""
    hs_code: str = Field(description="–ù–∞–π–¥–µ–Ω–Ω—ã–π 9-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¢–ù –í–≠–î (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8517.12.000)")
    confidence: int = Field(ge=0, le=100, description="–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –æ—Ç 0 –¥–æ 100 (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)")
    description: str = Field(description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ù –í–≠–î")
    reasoning: str = Field(description="–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–¥–∞")
    alternative_codes: List[str] = Field(
        default_factory=list, 
        description="–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã –ø—Ä–∏ –Ω–∏–∑–∫–æ–º —É—Ä–æ–≤–Ω–µ –¥–æ–≤–µ—Ä–∏—è"
    )


class BatchProcessingResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    results: List[HSCodeSearchResult]
    processing_stats: Dict[str, Any]
    errors: List[str] = Field(default_factory=list)


@function_tool
async def validate_product_description(
    ctx: RunContextWrapper[ProcessingContext], 
    product_name: str
) -> str:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞"""
    if not product_name or len(product_name.strip()) < 3:
        return "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    
    # –ü—Ä–æ—Å—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    normalized = product_name.strip().lower()
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    ctx.context.processed_items += 1
    
    return f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {normalized}"


class HSCodeAgent:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¢–ù –í–≠–î –∫–æ–¥–æ–≤"""
    
    def __init__(self, vector_store_id: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
        
        Args:
            vector_store_id: ID –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å –∫–æ–¥–∞–º–∏ –¢–ù –í–≠–î
        """
        self.vector_store_id = vector_store_id or config.VECTOR_STORE_ID
        self.confidence_threshold = config.DEFAULT_CONFIDENCE_THRESHOLD
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å FileSearchTool –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ
        self.agent = Agent(
            name="HS Code Classifier",
            instructions=self._build_instructions(),
            model="gpt-4.1",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            model_settings=ModelSettings(temperature=0.1),  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            tools=[
                FileSearchTool(
                    max_num_results=5,
                    vector_store_ids=[self.vector_store_id]
                ),
                WebSearchTool(),
                validate_product_description
            ],
            output_type=HSCodeSearchResult  # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
        )
    
    def _build_instructions(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        return f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¢–æ–≤–∞—Ä–Ω–æ–π –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ –≤–Ω–µ—à–Ω–µ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–¢–ù –í–≠–î) –¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω–∞.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
2. –û–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–æ—á–Ω—ã–π –∫–æ–¥ –¢–ù –í–≠–î (10-–∑–Ω–∞—á–Ω—ã–π)
3. –û–±–æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å –≤—ã–±–æ—Ä –∫–æ–¥–∞
4. –£–∫–∞–∑—ã–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è (confidence)

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ê–ù–ê–õ–ò–ó–£:
- –ò—Å–ø–æ–ª—å–∑—É–π FileSearchTool –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –∫–æ–¥–æ–≤ –¢–ù –í–≠–î
- –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç –∫–æ–¥–∞, —Ç–æ –∏—â–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—è WebSearchTool.
- –°–Ω–∞—á–∞–ª–∞ –≤–∞–ª–∏–¥–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–º–æ—â—å—é validate_product_description
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–∞—Ç–µ—Ä–∏–∞–ª, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Ç–æ–≤–∞—Ä–∞
- –£—á–∏—Ç—ã–≤–∞–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω–∞
- Confidence ‚â• {self.confidence_threshold}% —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–∏–º
- –ü—Ä–∏ –Ω–∏–∑–∫–æ–º confidence –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã

–§–û–†–ú–ê–¢ –í–´–í–û–î–ê - –°–¢–†–û–ì–û HSCodeSearchResult:
- hs_code: —Ç–æ—á–Ω—ã–π 9-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "8517.12.000")
- confidence: –æ—Ç 0 –¥–æ 100 (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –≥–¥–µ 100 = –ø–æ–ª–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
- description: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ù –í–≠–î
- reasoning: –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞
- alternative_codes: —Å–ø–∏—Å–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –ø—Ä–∏ uncertainty

–ü–†–ò–ú–ï–†–´ –•–û–†–û–®–ï–ì–û –ê–ù–ê–õ–ò–ó–ê:
‚úÖ "–°–º–∞—Ä—Ç—Ñ–æ–Ω Apple iPhone" ‚Üí "8517.12.000" (—Ç–µ–ª–µ—Ñ–æ–Ω—ã —Å–æ—Ç–æ–≤–æ–π —Å–≤—è–∑–∏, confidence: 95)
‚úÖ "–ö–æ—Ñ–µ –≤ –∑–µ—Ä–Ω–∞—Ö –∞—Ä–∞–±–∏–∫–∞" ‚Üí "0901.11.000" (–∫–æ—Ñ–µ –Ω–µ–æ–±–∂–∞—Ä–µ–Ω–Ω—ã–π, confidence: 90)
‚úÖ "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ —à–∏–Ω—ã R16" ‚Üí "4011.10.000" (—à–∏–Ω—ã –Ω–æ–≤—ã–µ –¥–ª—è –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ, confidence: 85)

–ë—É–¥—å —Ç–æ—á–Ω—ã–º, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º –≤ –∫–∞–∂–¥–æ–º —Ä–µ—à–µ–Ω–∏–∏!
"""

    async def classify_single_item(
        self, 
        product_description: str, 
        additional_info: Optional[Dict[str, str]] = None
    ) -> HSCodeSearchResult:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä
        
        Args:
            product_description: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            additional_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–±—Ä–µ–Ω–¥, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Ç.–¥.)
            
        Returns:
            HSCodeSearchResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        full_description = product_description
        if additional_info:
            additional_parts = []
            for key, value in additional_info.items():
                if value and value.strip():
                    additional_parts.append(f"{key}: {value}")
            if additional_parts:
                full_description += f" ({', '.join(additional_parts)})"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        context = ProcessingContext(
            batch_id="single_item",
            total_items=1
        )
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
            result = await Runner.run(
                starting_agent=self.agent,
                input=f"–û–ø—Ä–µ–¥–µ–ª–∏ –∫–æ–¥ –¢–ù –í–≠–î –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {full_description}",
                context=context,
                max_turns=10  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            classification = result.final_output
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not isinstance(classification, HSCodeSearchResult):
                # –§–æ–ª–ª–±—ç–∫ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                return HSCodeSearchResult(
                    hs_code="0000.00.000",
                    confidence=10,
                    description="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                    reasoning=f"–ê–≥–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª: {str(result.final_output)}"
                )
            
            return classification
            
        except Exception as e:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
            return HSCodeSearchResult(
                hs_code="0000.00.000",
                confidence=0,
                description="–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                reasoning=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}"
            )

    async def classify_batch(
        self, 
        items: List[Dict[str, str]], 
        progress_callback: Optional[callable] = None
    ) -> BatchProcessingResult:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–∞–∫–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
        Args:
            items: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
            progress_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            BatchProcessingResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        print(f"üöÄ [DEBUG] classify_batch –Ω–∞—á–∞—Ç —Å {len(items)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
        
        results = []
        errors = []
        batch_size = config.BATCH_SIZE
        
        print(f"üì¶ [DEBUG] –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        context = ProcessingContext(
            batch_id=f"batch_{len(items)}",
            total_items=len(items)
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –ø–∞–∫–µ—Ç–∞–º –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        total_batches = (len(items) + batch_size - 1) // batch_size
        print(f"üî¢ [DEBUG] –í—Å–µ–≥–æ –±–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_batches}")
        
        for batch_index, i in enumerate(range(0, len(items), batch_size)):
            batch = items[i:i + batch_size]
            print(f"üéØ [DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á {batch_index + 1}/{total_batches} —Å {len(batch)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            tasks = []
            for item_index, item in enumerate(batch):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                main_description = item.get('product_name', '') or item.get('description', '')
                additional_info = {k: v for k, v in item.items() 
                                 if k not in ['product_name', 'description', 'row_index'] and v}
                
                print(f"  üìù [DEBUG] –≠–ª–µ–º–µ–Ω—Ç {item_index + 1}: '{main_description}' + –¥–æ–ø.–∏–Ω—Ñ–æ: {additional_info}")
                
                task = self.classify_single_item(main_description, additional_info)
                tasks.append(task)
            
            print(f"‚ö° [DEBUG] –°–æ–∑–¥–∞–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            try:
                print(f"üîÑ [DEBUG] –ó–∞–ø—É—Å–∫–∞–µ–º asyncio.gather –¥–ª—è {len(tasks)} –∑–∞–¥–∞—á...")
                batch_results = await asyncio.gather(*tasks, return_exceptions=True)
                print(f"‚úÖ [DEBUG] asyncio.gather –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ {len(batch_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                for j, result in enumerate(batch_results):
                    if isinstance(result, Exception):
                        error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ {i+j+1}: {str(result)}"
                        print(f"‚ùå [DEBUG] {error_msg}")
                        errors.append(error_msg)
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        results.append(HSCodeSearchResult(
                            hs_code="0000.00.000",
                            confidence=0,
                            description="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                            reasoning=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(result)}"
                        ))
                    else:
                        print(f"‚úÖ [DEBUG] –≠–ª–µ–º–µ–Ω—Ç {i+j+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: –∫–æ–¥={result.hs_code}, –¥–æ–≤–µ—Ä–∏–µ={result.confidence}%")
                        results.append(result)
                
                # –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                if progress_callback:
                    processed_count = min(i + batch_size, len(items))
                    print(f"üìä [DEBUG] –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å: {processed_count}/{len(items)}")
                    try:
                        progress_callback(processed_count, len(items))
                    except Exception as callback_error:
                        print(f"‚ö†Ô∏è [DEBUG] –û—à–∏–±–∫–∞ –≤ progress_callback: {callback_error}")
                        
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞ {batch_index + 1}: {str(e)}"
                print(f"üí• [DEBUG] {error_msg}")
                errors.append(error_msg)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –≤—Å–µ–≥–æ –ø–∞–∫–µ—Ç–∞
                for item in batch:
                    results.append(HSCodeSearchResult(
                        hs_code="0000.00.000",
                        confidence=0,
                        description="–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                        reasoning=error_msg
                    ))
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        successful_classifications = [r for r in results if r.confidence > 0]
        high_confidence = [r for r in successful_classifications 
                          if r.confidence >= self.confidence_threshold]
        
        processing_stats = {
            "total_items": len(items),
            "successful_classifications": len(successful_classifications),
            "high_confidence_results": len(high_confidence),
            "average_confidence": (
                sum(r.confidence for r in successful_classifications) / len(successful_classifications)
                if successful_classifications else 0.0
            ),
            "processing_errors": len(errors)
        }
        
        print(f"üìà [DEBUG] –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {processing_stats}")
        print(f"üèÅ [DEBUG] classify_batch –∑–∞–≤–µ—Ä—à–µ–Ω —Å {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
        
        return BatchProcessingResult(
            results=results,
            processing_stats=processing_stats,
            errors=errors
        )

    def get_confidence_color(self, confidence: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ–≤–µ—Ä–∏—è"""
        if confidence >= 80:
            return config.CONFIDENCE_COLORS["high"]
        elif confidence >= 60:
            return config.CONFIDENCE_COLORS["medium"] 
        else:
            return config.CONFIDENCE_COLORS["low"]


# –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def classify_hs_code(
    product_description: str, 
    vector_store_id: Optional[str] = None
) -> HSCodeSearchResult:
    """
    –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    
    Args:
        product_description: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        vector_store_id: ID –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        HSCodeSearchResult —Å –∫–æ–¥–æ–º –¢–ù –í–≠–î
    """
    agent = HSCodeAgent(vector_store_id)
    return await agent.classify_single_item(product_description)


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
__all__ = [
    'HSCodeAgent',
    'HSCodeSearchResult', 
    'BatchProcessingResult',
    'ProcessingContext',
    'classify_hs_code'
] 